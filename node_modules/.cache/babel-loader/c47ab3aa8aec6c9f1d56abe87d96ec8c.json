{"ast":null,"code":"import _classCallCheck from \"/Users/ayaka/prefectures-population-graph/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ayaka/prefectures-population-graph/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ayaka/prefectures-population-graph/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ayaka/prefectures-population-graph/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ayaka/prefectures-population-graph/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ayaka/prefectures-population-graph/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { LineChart, Line, XAxis, YAxis } from 'recharts';\nimport \"./index.scss\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      checkbox: Array(47).fill(false),\n      prefectures: [],\n      // RESAS APIから取得した「都道府県一覧」（prefCode, PrefName）\n      trendData: [{\n        year: 1960\n      }, {\n        year: 1970\n      }, {\n        year: 1980\n      }, {\n        year: 1990\n      }, {\n        year: 2000\n      }, {\n        year: 2010\n      }, {\n        year: 2020\n      }, {\n        year: 2030\n      }, {\n        year: 2040\n      }] // RESAS APIから取得した「人口構成」（value）+ prefName\n\n    };\n\n    _this.handleChangeCheckbox = function (index) {\n      // チェックされていなかった(falseの)場合はチェックを入れる(trueに)。逆も同様\n      _this.state.checkbox[index] = !_this.state.checkbox[index];\n\n      _this.setState({\n        checkbox: _this.state.checkbox\n      }); // チェックした場合はチェックした都道府県の「人口構成」を取得し、prefCodeと一緒にprefTrendDataに追加\n\n\n      if (_this.state.checkbox[index]) {\n        fetch(\"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=\".concat(index + 1), {\n          headers: {\n            'X-API-KEY': 'laQNIVQSq86KoGBF9t0pEsDTR5h9Ejs9EXm1spwN'\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (res) {\n          // console.log(res.result.data[0].data); // 1960-2045の間で、5年毎のyearと人口\n          // console.log(res.result.data[0].data[0].year); // 1960\n          // console.log(res.result.data[0].data[0].value); // 1960年の人口\n          // console.log(res.result.data[0].data[2].year); // 1970\n          // console.log(res.result.data[0].data[2].value); // 1970年の人口\n          // console.log(this.state.prefectures[index].prefName); // チェックした都道府県の名前\n          // 10年単位でデータを取得\n          var newTrendData = _this.state.trendData.slice();\n\n          console.log(newTrendData); // for(var i = 0; i < 18; i++) {\n          //     for(var j = 0; j < newTrendData.length; j++) {\n          //         if(res.result.data[0].data[i].year === this.state.trendData[j].year) {\n          //             let thisPrefName = this.state.prefectures[index].prefName;\n          //             this.state.trendData[j].concat({\n          //                 thisPrefName: res.result.data[0].data[i].value\n          //             })\n          //         }\n          //     }\n          // }\n          // this.setState({ trendData: newTrendData });\n        }); // console.log(this.state.prefTrendData);\n      } else {// チェックを外した場合はチェックを外した都道府県の「人口構成」とprefCodeのデータをpredTrendDataから削除\n          // for(var i = 0; i < this.state.trendData.length; i++) {\n          //     if(this.state.trendData[i].prefCode === this.state.prefectures[index].prefCode) {\n          //         this.state.prefTrendData.splice(i, 1);\n          //     }\n          // }\n          // this.setState({ prefTrendData: this.state.prefTrendData });\n        }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('https://opendata.resas-portal.go.jp/api/v1/prefectures', {\n        headers: {\n          'X-API-KEY': 'laQNIVQSq86KoGBF9t0pEsDTR5h9Ejs9EXm1spwN'\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (res) {\n        // console.log(res.result); ⇨ {prefCode: 1 prefName: \"北海道\"},{prefCode: 2, prefName: \"青森県\"},,,\n        // console.log(res.result[1].prefName); ⇨ 青森県\n        _this2.setState({\n          prefectures: res.result\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"contentsWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"\\u90FD\\u9053\\u5E9C\\u770C\\u5225\\u306E\\u7DCF\\u4EBA\\u53E3\\u63A8\\u79FB\\u30B0\\u30E9\\u30D5\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, this.state.prefectures.map(function (pref, index) {\n        return React.createElement(\"li\", {\n          key: pref.prefCode,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"checkbox\",\n          checked: _this3.state.checkbox[index],\n          onChange: function onChange() {\n            return _this3.handleChangeCheckbox(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, pref.prefName));\n      })), this.state.prefTrendData.map(function (data, index) {\n        return React.createElement(LineChart, {\n          width: 800,\n          height: 400,\n          data: data.data,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(XAxis, {\n          dataKey: \"year\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }), React.createElement(YAxis, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }), React.createElement(Line, {\n          type: \"monotone\",\n          dataKey: \"value\",\n          stroke: \"#8884d8\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }));\n      }), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, this.state.prefTrendData.map(function (data, index) {\n        return React.createElement(\"li\", {\n          key: data.prefCode,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, data.data.map(function (d, index) {\n          return React.createElement(\"span\", {\n            key: d.year,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          }, d.year, \":\", d.value, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114\n            },\n            __self: this\n          }));\n        }));\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 129\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/Users/ayaka/prefectures-population-graph/src/index.js"],"names":["React","ReactDOM","LineChart","Line","XAxis","YAxis","App","state","checkbox","Array","fill","prefectures","trendData","year","handleChangeCheckbox","index","setState","fetch","headers","then","response","json","res","newTrendData","slice","console","log","result","map","pref","prefCode","prefName","prefTrendData","data","d","value","Component","rootElement","document","getElementById","render"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAAQC,SAAR,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,KAAhC,QAA4C,UAA5C;AACA,OAAO,cAAP;;IAEMC,G;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,QAAQ,EAAEC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,KAAf,CADN;AAEJC,MAAAA,WAAW,EAAE,EAFT;AAEa;AACjBC,MAAAA,SAAS,EAAE,CACP;AAACC,QAAAA,IAAI,EAAE;AAAP,OADO,EAEP;AAACA,QAAAA,IAAI,EAAE;AAAP,OAFO,EAGP;AAACA,QAAAA,IAAI,EAAE;AAAP,OAHO,EAIP;AAACA,QAAAA,IAAI,EAAE;AAAP,OAJO,EAKP;AAACA,QAAAA,IAAI,EAAE;AAAP,OALO,EAMP;AAACA,QAAAA,IAAI,EAAE;AAAP,OANO,EAOP;AAACA,QAAAA,IAAI,EAAE;AAAP,OAPO,EAQP;AAACA,QAAAA,IAAI,EAAE;AAAP,OARO,EASP;AAACA,QAAAA,IAAI,EAAE;AAAP,OATO,CAHP,CAaF;;AAbE,K;;UA4BRC,oB,GAAuB,UAAAC,KAAK,EAAI;AAC5B;AACA,YAAKR,KAAL,CAAWC,QAAX,CAAoBO,KAApB,IAA6B,CAAC,MAAKR,KAAL,CAAWC,QAAX,CAAoBO,KAApB,CAA9B;;AACA,YAAKC,QAAL,CAAc;AAAER,QAAAA,QAAQ,EAAE,MAAKD,KAAL,CAAWC;AAAvB,OAAd,EAH4B,CAI5B;;;AACA,UAAG,MAAKD,KAAL,CAAWC,QAAX,CAAoBO,KAApB,CAAH,EAA+B;AAC3BE,QAAAA,KAAK,yGAAkGF,KAAK,GAAG,CAA1G,GAA+G;AAChHG,UAAAA,OAAO,EAAE;AAAE,yBAAa;AAAf;AADuG,SAA/G,CAAL,CAGCC,IAHD,CAGM,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,SAHd,EAICF,IAJD,CAIM,UAAAG,GAAG,EAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,cAAMC,YAAY,GAAG,MAAKhB,KAAL,CAAWK,SAAX,CAAqBY,KAArB,EAArB;;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ,EAVS,CAYT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,SA3BD,EAD2B,CA6B3B;AACH,OA9BD,MA8BO,CAAE;AACL;AACA;AACA;AACA;AACA;AACA;AACH;AACJ,K;;;;;;;wCAvDmB;AAAA;;AAChBN,MAAAA,KAAK,CAAC,wDAAD,EAA2D;AAC5DC,QAAAA,OAAO,EAAE;AAAE,uBAAa;AAAf;AADmD,OAA3D,CAAL,CAGCC,IAHD,CAGM,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OAHd,EAICF,IAJD,CAIM,UAAAG,GAAG,EAAI;AACT;AACA;AACA,QAAA,MAAI,CAACN,QAAL,CAAc;AAAEL,UAAAA,WAAW,EAAEW,GAAG,CAACK;AAAnB,SAAd;AACH,OARD;AASH;;;6BA+CM;AAAA;;AAEP,aACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gGADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKpB,KAAL,CAAWI,WAAX,CAAuBiB,GAAvB,CAA2B,UAACC,IAAD,EAAOd,KAAP,EAAiB;AACzC,eACI;AAAI,UAAA,GAAG,EAAEc,IAAI,CAACC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,OAAO,EAAE,MAAI,CAACvB,KAAL,CAAWC,QAAX,CAAoBO,KAApB,CAAhC;AAA4D,UAAA,QAAQ,EAAE;AAAA,mBAAM,MAAI,CAACD,oBAAL,CAA0BC,KAA1B,CAAN;AAAA,WAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAOc,IAAI,CAACE,QAAZ,CAFJ,CADJ;AAMH,OAPA,CADL,CAFJ,EAaK,KAAKxB,KAAL,CAAWyB,aAAX,CAAyBJ,GAAzB,CAA6B,UAACK,IAAD,EAAOlB,KAAP,EAAiB;AACvC,eACI,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAE,GAAlB;AAAuB,UAAA,MAAM,EAAE,GAA/B;AAAoC,UAAA,IAAI,EAAEkB,IAAI,CAACA,IAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,EAGI,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAC,UAAX;AAAsB,UAAA,OAAO,EAAC,OAA9B;AAAsC,UAAA,MAAM,EAAC,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ,CADJ;AAOH,OARJ,CAbL,EAuBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK1B,KAAL,CAAWyB,aAAX,CAAyBJ,GAAzB,CAA6B,UAACK,IAAD,EAAOlB,KAAP,EAAiB;AAC3C,eACI;AAAI,UAAA,GAAG,EAAEkB,IAAI,CAACH,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKG,IAAI,CAACA,IAAL,CAAUL,GAAV,CAAc,UAACM,CAAD,EAAInB,KAAJ,EAAc;AACzB,iBACI;AAAM,YAAA,GAAG,EAAEmB,CAAC,CAACrB,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACKqB,CAAC,CAACrB,IADP,OACcqB,CAAC,CAACC,KADhB,EACsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADtB,CADJ;AAKH,SANA,CADL,CADJ;AAWH,OAZA,CADL,CAvBJ,CADJ;AA0CD;;;;EAvHenC,KAAK,CAACoC,S;;AA0HxB,IAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACAtC,QAAQ,CAACuC,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBH,WAAzB","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {LineChart, Line, XAxis, YAxis} from 'recharts';\nimport \"./index.scss\";\n\nclass App extends React.Component {\n\n    state = {\n        checkbox: Array(47).fill(false),\n        prefectures: [], // RESAS APIから取得した「都道府県一覧」（prefCode, PrefName）\n        trendData: [\n            {year: 1960},\n            {year: 1970},\n            {year: 1980},\n            {year: 1990},\n            {year: 2000},\n            {year: 2010},\n            {year: 2020},\n            {year: 2030},\n            {year: 2040},\n        ] // RESAS APIから取得した「人口構成」（value）+ prefName\n    };\n\n    componentDidMount() {\n        fetch('https://opendata.resas-portal.go.jp/api/v1/prefectures', {\n            headers: { 'X-API-KEY': 'laQNIVQSq86KoGBF9t0pEsDTR5h9Ejs9EXm1spwN' }\n        })\n        .then(response => response.json())\n        .then(res => {\n            // console.log(res.result); ⇨ {prefCode: 1 prefName: \"北海道\"},{prefCode: 2, prefName: \"青森県\"},,,\n            // console.log(res.result[1].prefName); ⇨ 青森県\n            this.setState({ prefectures: res.result });\n        });\n    }\n\n    handleChangeCheckbox = index => {\n        // チェックされていなかった(falseの)場合はチェックを入れる(trueに)。逆も同様\n        this.state.checkbox[index] = !this.state.checkbox[index];\n        this.setState({ checkbox: this.state.checkbox });\n        // チェックした場合はチェックした都道府県の「人口構成」を取得し、prefCodeと一緒にprefTrendDataに追加\n        if(this.state.checkbox[index]) {\n            fetch(`https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=${index + 1}`, {\n                headers: { 'X-API-KEY': 'laQNIVQSq86KoGBF9t0pEsDTR5h9Ejs9EXm1spwN' }\n            })\n            .then(response => response.json())\n            .then(res => {\n                // console.log(res.result.data[0].data); // 1960-2045の間で、5年毎のyearと人口\n                // console.log(res.result.data[0].data[0].year); // 1960\n                // console.log(res.result.data[0].data[0].value); // 1960年の人口\n                // console.log(res.result.data[0].data[2].year); // 1970\n                // console.log(res.result.data[0].data[2].value); // 1970年の人口\n                // console.log(this.state.prefectures[index].prefName); // チェックした都道府県の名前\n                // 10年単位でデータを取得\n\n                const newTrendData = this.state.trendData.slice();\n                console.log(newTrendData);\n\n                // for(var i = 0; i < 18; i++) {\n                //     for(var j = 0; j < newTrendData.length; j++) {\n                //         if(res.result.data[0].data[i].year === this.state.trendData[j].year) {\n                //             let thisPrefName = this.state.prefectures[index].prefName;\n                //             this.state.trendData[j].concat({\n                //                 thisPrefName: res.result.data[0].data[i].value\n                //             })\n                //         }\n                //     }\n                // }\n                // this.setState({ trendData: newTrendData });\n            });\n            // console.log(this.state.prefTrendData);\n        } else { // チェックを外した場合はチェックを外した都道府県の「人口構成」とprefCodeのデータをpredTrendDataから削除\n            // for(var i = 0; i < this.state.trendData.length; i++) {\n            //     if(this.state.trendData[i].prefCode === this.state.prefectures[index].prefCode) {\n            //         this.state.prefTrendData.splice(i, 1);\n            //     }\n            // }\n            // this.setState({ prefTrendData: this.state.prefTrendData });\n        }\n    }  \n\n  render() {\n      \n    return (\n        <div className=\"contentsWrapper\">\n            <h1>都道府県別の総人口推移グラフ</h1>\n            <ul>\n                {this.state.prefectures.map((pref, index) => {\n                    return (\n                        <li key={pref.prefCode}>\n                            <input type=\"checkbox\" checked={this.state.checkbox[index]} onChange={() => this.handleChangeCheckbox(index)}/>\n                            <span>{pref.prefName}</span>\n                        </li>\n                    );\n                })}\n            </ul>\n\n            {this.state.prefTrendData.map((data, index) => {\n                    return (\n                        <LineChart width={800} height={400} data={data.data}>\n                            <XAxis dataKey='year' />\n                            <YAxis/>\n                            <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\n                        </LineChart>\n                    );\n                })}\n\n            <ul>\n                {this.state.prefTrendData.map((data, index) => {\n                    return (\n                        <li key={data.prefCode}>\n                            {data.data.map((d, index) => {\n                                return (\n                                    <span key={d.year}>\n                                        {d.year}:{d.value}<br/>\n                                    </span>\n                                );\n                            })}\n                        </li>\n                    );\n                })}\n            </ul>\n            \n        </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}