{"ast":null,"code":"import _classCallCheck from \"/Users/ayaka/prefectures-population-graph/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ayaka/prefectures-population-graph/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ayaka/prefectures-population-graph/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ayaka/prefectures-population-graph/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ayaka/prefectures-population-graph/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ayaka/prefectures-population-graph/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { LineChart, Line, XAxis, YAxis } from 'recharts';\nimport \"./index.scss\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      checkbox: Array(47).fill(false),\n      prefectures: [],\n      // RESAS APIから取得した「都道府県一覧」（prefCode, PrefName）\n      trendData: [{\n        year: 1960\n      }, {\n        year: 1970\n      }, {\n        year: 1980\n      }, {\n        year: 1990\n      }, {\n        year: 2000\n      }, {\n        year: 2010\n      }, {\n        year: 2020\n      }, {\n        year: 2030\n      }, {\n        year: 2040\n      }],\n      // RESAS APIから取得した「人口構成」（value）+ prefName\n      colors: [\"#F44E4E\", \"#0E0E56\"]\n    };\n\n    _this.handleChangeCheckbox = function (index) {\n      // チェックされていなかった(falseの)場合はチェックを入れる(trueに)。逆も同様\n      _this.state.checkbox[index] = !_this.state.checkbox[index];\n\n      _this.setState({\n        checkbox: _this.state.checkbox\n      }); // チェックした場合はチェックした都道府県の「人口構成」を取得し、prefNameと一緒にtrendDataに追加\n\n\n      if (_this.state.checkbox[index]) {\n        fetch(\"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=\".concat(index + 1), {\n          headers: {\n            'X-API-KEY': 'laQNIVQSq86KoGBF9t0pEsDTR5h9Ejs9EXm1spwN'\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (res) {\n          // console.log(res.result.data[0].data); // 1960-2045の間で、5年毎のyearと人口\n          // console.log(res.result.data[0].data[0].year); // 1960\n          // console.log(res.result.data[0].data[0].value); // 1960年の人口\n          // console.log(res.result.data[0].data[2].year); // 1970\n          // console.log(res.result.data[0].data[2].value); // 1970年の人口\n          // console.log(this.state.prefectures[index].prefName); // 都道府県の名前\n          // console.log(res.result.data[0].data[0].year); // 1960 \n          // console.log(this.state.trendData[0].year); // 1960\n          // console.log(res.result.data[0].data[0].value); // 1960の人口\n          // console.log(this.state.trendData.length);\n          // console.log(this.state.trendData[0]);\n          // チェックした都道府県の名前\n          var thisPrefName = _this.state.prefectures[index].prefName;\n\n          var trendDataCopy = _this.state.trendData.slice(); // チェックした都道府県の10年毎の人口データをtrendDataに追加\n\n\n          for (var i = 0; i < res.result.data[0].data.length; i++) {\n            for (var j = 0; j < trendDataCopy.length; j++) {\n              if (res.result.data[0].data[i].year === trendDataCopy[j].year) {\n                trendDataCopy[j][thisPrefName] = res.result.data[0].data[i].value;\n              }\n            }\n          }\n\n          _this.setState({\n            trendData: trendDataCopy\n          });\n\n          console.log(_this.state.trendData);\n        });\n      } else {\n        // チェックを外した場合はチェックを外した都道府県のデータをtrendDataから削除\n        var thisPrefName = _this.state.prefectures[index].prefName;\n\n        var trendDataCopy = _this.state.trendData.slice();\n\n        for (var i = 0; i < trendDataCopy.length; i++) {\n          delete trendDataCopy[i][thisPrefName];\n        }\n\n        _this.setState({\n          trendData: trendDataCopy\n        });\n\n        console.log(_this.state.trendData); // for(var i = 0; i < this.state.trendData.length; i++) {\n        //     if(this.state.trendData[i].prefCode === this.state.prefectures[index].prefName) {\n        //         this.state.prefTrendData.splice(i, 1);\n        //     }\n        // }\n        // this.setState({ prefTrendData: this.state.trendData });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('https://opendata.resas-portal.go.jp/api/v1/prefectures', {\n        headers: {\n          'X-API-KEY': 'laQNIVQSq86KoGBF9t0pEsDTR5h9Ejs9EXm1spwN'\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (res) {\n        // console.log(res.result); ⇨ {prefCode: 1 prefName: \"北海道\"},{prefCode: 2, prefName: \"青森県\"},,,\n        // console.log(res.result[1].prefName); ⇨ 青森県\n        _this2.setState({\n          prefectures: res.result\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"contentsWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"\\u90FD\\u9053\\u5E9C\\u770C\\u5225\\u306E\\u7DCF\\u4EBA\\u53E3\\u63A8\\u79FB\\u30B0\\u30E9\\u30D5\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, this.state.prefectures.map(function (pref, index) {\n        return React.createElement(\"li\", {\n          key: pref.prefCode,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"checkbox\",\n          checked: _this3.state.checkbox[index],\n          onChange: function onChange() {\n            return _this3.handleChangeCheckbox(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, pref.prefName));\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 139\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/Users/ayaka/prefectures-population-graph/src/index.js"],"names":["React","ReactDOM","LineChart","Line","XAxis","YAxis","App","state","checkbox","Array","fill","prefectures","trendData","year","colors","handleChangeCheckbox","index","setState","fetch","headers","then","response","json","res","thisPrefName","prefName","trendDataCopy","slice","i","result","data","length","j","value","console","log","map","pref","prefCode","Component","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {LineChart, Line, XAxis, YAxis} from 'recharts';\nimport \"./index.scss\";\n\nclass App extends React.Component {\n\n    state = {\n        checkbox: Array(47).fill(false),\n        prefectures: [], // RESAS APIから取得した「都道府県一覧」（prefCode, PrefName）\n        trendData: [\n            { year: 1960 },\n            { year: 1970 },\n            { year: 1980 }, \n            { year: 1990 },\n            { year: 2000 },\n            { year: 2010 },\n            { year: 2020 },\n            { year: 2030 },\n            { year: 2040 }\n        ], // RESAS APIから取得した「人口構成」（value）+ prefName\n        colors: [ \"#F44E4E\", \"#0E0E56\" ] \n    };\n\n    componentDidMount() {\n        fetch('https://opendata.resas-portal.go.jp/api/v1/prefectures', {\n            headers: { 'X-API-KEY': 'laQNIVQSq86KoGBF9t0pEsDTR5h9Ejs9EXm1spwN' }\n        })\n        .then(response => response.json())\n        .then(res => {\n            // console.log(res.result); ⇨ {prefCode: 1 prefName: \"北海道\"},{prefCode: 2, prefName: \"青森県\"},,,\n            // console.log(res.result[1].prefName); ⇨ 青森県\n            this.setState({ prefectures: res.result });\n        });\n    }\n\n    handleChangeCheckbox = index => {\n        // チェックされていなかった(falseの)場合はチェックを入れる(trueに)。逆も同様\n        this.state.checkbox[index] = !this.state.checkbox[index];\n        this.setState({ checkbox: this.state.checkbox });\n        // チェックした場合はチェックした都道府県の「人口構成」を取得し、prefNameと一緒にtrendDataに追加\n        if(this.state.checkbox[index]) {\n            fetch(`https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=${index + 1}`, {\n                headers: { 'X-API-KEY': 'laQNIVQSq86KoGBF9t0pEsDTR5h9Ejs9EXm1spwN' }\n            })\n            .then(response => response.json())\n            .then(res => {\n                // console.log(res.result.data[0].data); // 1960-2045の間で、5年毎のyearと人口\n                // console.log(res.result.data[0].data[0].year); // 1960\n                // console.log(res.result.data[0].data[0].value); // 1960年の人口\n                // console.log(res.result.data[0].data[2].year); // 1970\n                // console.log(res.result.data[0].data[2].value); // 1970年の人口\n                // console.log(this.state.prefectures[index].prefName); // 都道府県の名前\n                // console.log(res.result.data[0].data[0].year); // 1960 \n                // console.log(this.state.trendData[0].year); // 1960\n                // console.log(res.result.data[0].data[0].value); // 1960の人口\n                // console.log(this.state.trendData.length);\n                // console.log(this.state.trendData[0]);\n\n                // チェックした都道府県の名前\n                const thisPrefName = this.state.prefectures[index].prefName;\n                const trendDataCopy = this.state.trendData.slice();\n                // チェックした都道府県の10年毎の人口データをtrendDataに追加\n                for(var i = 0; i < res.result.data[0].data.length; i++) {\n                     for(var j = 0; j < trendDataCopy.length; j++) {\n                         if(res.result.data[0].data[i].year === trendDataCopy[j].year) {\n                            trendDataCopy[j][thisPrefName] = res.result.data[0].data[i].value\n                         }\n                     }\n                 }\n                 this.setState({ trendData: trendDataCopy });\n                 console.log(this.state.trendData);\n            });\n        } else { // チェックを外した場合はチェックを外した都道府県のデータをtrendDataから削除\n            const thisPrefName = this.state.prefectures[index].prefName;\n            const trendDataCopy = this.state.trendData.slice();\n            for(var i = 0; i < trendDataCopy.length; i++) {\n                delete trendDataCopy[i][thisPrefName];\n            }\n            this.setState({ trendData: trendDataCopy });\n            console.log(this.state.trendData);\n            // for(var i = 0; i < this.state.trendData.length; i++) {\n            //     if(this.state.trendData[i].prefCode === this.state.prefectures[index].prefName) {\n            //         this.state.prefTrendData.splice(i, 1);\n            //     }\n            // }\n            // this.setState({ prefTrendData: this.state.trendData });\n        }\n    }  \n\n  render() {\n      \n    return (\n        <div className=\"contentsWrapper\">\n            <h1>都道府県別の総人口推移グラフ</h1>\n            <ul>\n                {this.state.prefectures.map((pref, index) => {\n                    return (\n                        <li key={pref.prefCode}>\n                            <input type=\"checkbox\" checked={this.state.checkbox[index]} onChange={() => this.handleChangeCheckbox(index)}/>\n                            <span>{pref.prefName}</span>\n                        </li>\n                    );\n                })}\n            </ul>\n            \n            {/*\n            <LineChart width={800} height={400} data={this.state.trendData}>\n                        <XAxis dataKey='year' />\n                        <YAxis />\n                        <Line type=\"monotone\" dataKey=\"北海道\" stroke={this.state.colors[0]}/>\n                        <Line type=\"monotone\" dataKey=\"青森県\" stroke={this.state.colors[1]} />\n            </LineChart>\n            */}\n\n            {/*\n            <ul>\n                {this.state.prefTrendData.map((data, index) => {\n                    return (\n                        <li key={data.prefCode}>\n                            {data.data.map((d, index) => {\n                                return (\n                                    <span key={d.year}>\n                                        {d.year}:{d.value}<br/>\n                                    </span>\n                                );\n                            })}\n                        </li>\n                    );\n                })}\n            </ul>\n            */}\n        </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}